-- FluentLibrary.lua
local FluentLibrary = {}
FluentLibrary.__index = FluentLibrary

-- Function to create a new ScreenGui
function FluentLibrary:CreateScreenGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    return screenGui
end

-- Function to create a new window
function FluentLibrary:CreateWindow(title)
    local window = Instance.new("Frame")
    window.Size = UDim2.new(0, 400, 0, 300)
    window.Position = UDim2.new(0.5, -200, 0.5, -150)
    window.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    window.BorderSizePixel = 0
    window.Parent = self:CreateScreenGui()

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Text = title
    titleLabel.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = window

    -- Make the window draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos

    local function updatePosition(input)
        local delta = input.Position - dragStart
        window.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = window.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleLabel.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("RunService").RenderStepped:Connect(function()
        if dragging and dragInput then
            updatePosition(dragInput)
        end
    end)

    return window
end

-- Create a new tab
function FluentLibrary:CreateTab(window, tabName)
    local tab = Instance.new("Frame")
    tab.Size = UDim2.new(1, 0, 1, -30)
    tab.Position = UDim2.new(0, 0, 0, 30)
    tab.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    tab.Parent = window

    return tab
end

-- Create a button
function FluentLibrary:CreateButton(tab, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 100, 0, 40)
    button.Text = text
    button.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.SourceSans
    button.Parent = tab

    -- Add cartoonish animation
    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
        button:TweenSize(UDim2.new(1.1, 0, 1.1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
    end)

    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
        button:TweenSize(UDim2.new(1, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
    end)

    button.MouseButton1Click:Connect(callback)

    return button
end

-- Create a toggle
function FluentLibrary:CreateToggle(tab, text, callback)
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0,  100, 0, 40)
    toggle.Text = text .. ": OFF"
    toggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggle.Font = Enum.Font.SourceSans
    toggle.Parent = tab

    local toggleState = false

    toggle.MouseButton1Click:Connect(function()
        if toggleState then
            toggle.Text = text .. ": OFF"
            toggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            toggleState = false
        else
            toggle.Text = text .. ": ON"
            toggle.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            toggleState = true
        end

        callback(toggleState)
    end)

    return toggle
end

-- Create a modal
function FluentLibrary:CreateModal(window, title, message, callback)
    local modal = Instance.new("Frame")
    modal.Size = UDim2.new(0, 300, 0, 200)
    modal.Position = UDim2.new(0.5, -150, 0.5, -100)
    modal.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    modal.BorderSizePixel = 0
    modal.Parent = window

    local modalTitle = Instance.new("TextLabel")
    modalTitle.Size = UDim2.new(1, 0, 0, 30)
    modalTitle.Text = title
    modalTitle.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    modalTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    modalTitle.Font = Enum.Font.SourceSansBold
    modalTitle.Parent = modal

    local modalMessage = Instance.new("TextLabel")
    modalMessage.Size = UDim2.new(1, 0, 1, -30)
    modalMessage.Text = message
    modalMessage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    modalMessage.TextColor3 = Color3.fromRGB(0, 0, 0)
    modalMessage.Font = Enum.Font.SourceSans
    modalMessage.Parent = modal

    local modalButton = Instance.new("TextButton")
    modalButton.Size = UDim2.new(0, 100, 0, 40)
    modalButton.Text = "OK"
    modalButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    modalButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    modalButton.Font = Enum.Font.SourceSans
    modalButton.Parent = modal

    modalButton.MouseButton1Click:Connect(function()
        modal:Destroy()
        callback()
    end)

    return modal
end

-- Create a tooltip
function FluentLibrary:CreateTooltip(tab, text)
    local tooltip = Instance.new("TextLabel")
    tooltip.Size = UDim2.new(0, 200, 0, 40)
    tooltip.Text = text
    tooltip.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    tooltip.TextColor3 = Color3.fromRGB(0, 0, 0)
    tooltip.Font = Enum.Font.SourceSans
    tooltip.Parent = tab

    tooltip.BackgroundTransparency = 1
    tooltip.TextTransparency = 1

    local function showTooltip()
        tooltip.BackgroundTransparency = 0
        tooltip.TextTransparency = 0
    end

    local function hideTooltip()
        tooltip.BackgroundTransparency = 1
        tooltip.TextTransparency = 1
    end

    tab.MouseEnter:Connect(showTooltip)
    tab.MouseLeave:Connect(hideTooltip)

    return tooltip
end

return FluentLibrary
